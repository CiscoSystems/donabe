var search_data = {"index":{"searchIndex":["ropenstack","cinder","glance","keystone","malformedrequesterror","notfounderror","nova","openstackservice","quantum","rest","ropenstackerror","timeouterror","unauthorisederror","action()","addendpoint()","addtoservices()","add_router_gateway()","add_router_interface()","admin()","attach_volume()","authenticate()","build_headers()","build_http()","create_network()","create_port()","create_router()","create_server()","create_subnet()","delete_image()","delete_network()","delete_port()","delete_request()","delete_router()","delete_router_gateway()","delete_router_interface()","delete_server()","delete_subnet()","detach_volume()","device_ports()","do_request()","error_manager()","flavors()","getendpoints()","getservices()","get_request()","images()","images()","move_port_to_subnets()","networks()","new()","new()","ports()","post_request()","put_octect()","put_request()","quotas()","raw()","routers()","scope_token()","servers()","servers_detailed()","services()","subnets()","tenant_id()","tenant_list()","tenant_name()","token()","token_metadata()","update_port()","upload_image_from_file()","user()","volumes()"],"longSearchIndex":["ropenstack","ropenstack::cinder","ropenstack::glance","ropenstack::keystone","ropenstack::malformedrequesterror","ropenstack::notfounderror","ropenstack::nova","ropenstack::openstackservice","ropenstack::quantum","ropenstack::rest","ropenstack::ropenstackerror","ropenstack::timeouterror","ropenstack::unauthorisederror","ropenstack::nova#action()","ropenstack::keystone#addendpoint()","ropenstack::keystone#addtoservices()","ropenstack::quantum#add_router_gateway()","ropenstack::quantum#add_router_interface()","ropenstack::keystone#admin()","ropenstack::nova#attach_volume()","ropenstack::keystone#authenticate()","ropenstack::rest#build_headers()","ropenstack::rest#build_http()","ropenstack::quantum#create_network()","ropenstack::quantum#create_port()","ropenstack::quantum#create_router()","ropenstack::nova#create_server()","ropenstack::quantum#create_subnet()","ropenstack::nova#delete_image()","ropenstack::quantum#delete_network()","ropenstack::quantum#delete_port()","ropenstack::rest#delete_request()","ropenstack::quantum#delete_router()","ropenstack::quantum#delete_router_gateway()","ropenstack::quantum#delete_router_interface()","ropenstack::nova#delete_server()","ropenstack::quantum#delete_subnet()","ropenstack::nova#detach_volume()","ropenstack::quantum#device_ports()","ropenstack::rest#do_request()","ropenstack::rest#error_manager()","ropenstack::nova#flavors()","ropenstack::keystone#getendpoints()","ropenstack::keystone#getservices()","ropenstack::rest#get_request()","ropenstack::glance#images()","ropenstack::nova#images()","ropenstack::quantum#move_port_to_subnets()","ropenstack::quantum#networks()","ropenstack::keystone::new()","ropenstack::openstackservice::new()","ropenstack::quantum#ports()","ropenstack::rest#post_request()","ropenstack::glance#put_octect()","ropenstack::rest#put_request()","ropenstack::nova#quotas()","ropenstack::keystone#raw()","ropenstack::quantum#routers()","ropenstack::keystone#scope_token()","ropenstack::nova#servers()","ropenstack::nova#servers_detailed()","ropenstack::keystone#services()","ropenstack::quantum#subnets()","ropenstack::keystone#tenant_id()","ropenstack::keystone#tenant_list()","ropenstack::keystone#tenant_name()","ropenstack::keystone#token()","ropenstack::keystone#token_metadata()","ropenstack::quantum#update_port()","ropenstack::glance#upload_image_from_file()","ropenstack::keystone#user()","ropenstack::cinder#volumes()"],"info":[["Ropenstack","","Ropenstack.html","","<p>Name: Ropenstack\n<p>Description: Module used to wrap all Openstack service classes.\n<p>Author: Sam ‘Tehsmash’ …\n"],["Ropenstack::Cinder","","Ropenstack/Cinder.html","","<p>Name: Cinder\n<p>Description: Implementation of the Cinder API Client in Ruby.\n<p>Author: Sam ‘Tehsmash’ Betts …\n"],["Ropenstack::Glance","","Ropenstack/Glance.html","","<p>Name: Glance\n<p>Description: Implementation of the Glance V2.0 API Client in Ruby\n<p>Author: Sam ‘Tehsmash’  …\n"],["Ropenstack::Keystone","","Ropenstack/Keystone.html","","<p>Name: Keystone\n<p>Description: An implementation of the Keystone API Client in Ruby\n<p>Author: Sam ‘Tehsmash’ …\n"],["Ropenstack::MalformedRequestError","","Ropenstack/MalformedRequestError.html","","<p>Error fired if openstack returns a Bad Request error\n"],["Ropenstack::NotFoundError","","Ropenstack/NotFoundError.html","","<p>Error fired if a 404 error comes back from openstack\n"],["Ropenstack::Nova","","Ropenstack/Nova.html","","<p>Name: Nova\n<p>Description: Implementation of the Nova API Client in Ruby\n<p>Author: Sam ‘Tehsmash’ Betts\n"],["Ropenstack::OpenstackService","","Ropenstack/OpenstackService.html","","<p>Name: OpenstackService\n<p>Description:  A parent class for all the openstack service classes, with\nfunctions …\n"],["Ropenstack::Quantum","","Ropenstack/Quantum.html","","<p>Name: Quantum\n<p>Description: An implementation of the Quantum V2.0 API Client in Ruby\n<p>Author: Sam ‘Tehsmash’ …\n"],["Ropenstack::Rest","","Ropenstack/Rest.html","","<p>Name: Rest\n<p>Description: A generic wrapper for basic rest functions with JSON data\nwhich return ruby hashes. …\n"],["Ropenstack::RopenstackError","","Ropenstack/RopenstackError.html","","<p>A wrapper class for Standard Error for Ropenstack Errors\n"],["Ropenstack::TimeoutError","","Ropenstack/TimeoutError.html","","<p>Error fired if the connection to openstack fails\n"],["Ropenstack::UnauthorisedError","","Ropenstack/UnauthorisedError.html","","<p>Error fired if 403 Error returns from openstack\n"],["action","Ropenstack::Nova","Ropenstack/Nova.html#method-i-action","(id, act, *args)","<p>Perform an action on a server on Openstack, by passing an id,  and an\naction, some actions require more …\n"],["addEndpoint","Ropenstack::Keystone","Ropenstack/Keystone.html#method-i-addEndpoint","(region, service_id, publicurl, adminurl, internalurl)","<p>Add an endpoint list\n"],["addToServices","Ropenstack::Keystone","Ropenstack/Keystone.html#method-i-addToServices","(name, type, description)","<p>Add a service to the keystone services directory\n"],["add_router_gateway","Ropenstack::Quantum","Ropenstack/Quantum.html#method-i-add_router_gateway","(router, external_gateway_info)","<p>Enable external connectivity through this router by connecting it to an\n“external network” …\n"],["add_router_interface","Ropenstack::Quantum","Ropenstack/Quantum.html#method-i-add_router_interface","(router, subnet)","<p>Connect a router to a subnet, given router id and subnet id.\n"],["admin","Ropenstack::Keystone","Ropenstack/Keystone.html#method-i-admin","()","<p>Returns true if a user is admin.\n"],["attach_volume","Ropenstack::Nova","Ropenstack/Nova.html#method-i-attach_volume","(id, volume)","<p>Attach a cinder volume to a server, by passing the server id and the volume\nid.\n"],["authenticate","Ropenstack::Keystone","Ropenstack/Keystone.html#method-i-authenticate","(username, password, token = nil, tenant = nil)","<p>Authenticate via keystone, unless a token and tenant are defined then a\nunscoped  token is returned with …\n"],["build_headers","Ropenstack::Rest","Ropenstack/Rest.html#method-i-build_headers","(token)","<p>Builds headers for requests which send JSON data, if a keystone token is\nsupplied\n<p>it adds the X-Auth- …\n"],["build_http","Ropenstack::Rest","Ropenstack/Rest.html#method-i-build_http","(uri, timeout)","<p>Build a HTTP object having been given a timeout and a URI object  Returns\nNet::HTTP object.\n"],["create_network","Ropenstack::Quantum","Ropenstack/Quantum.html#method-i-create_network","(name, tenant, admin_state_up = true)","<p>Create a new network on Openstack given a name and tenant id.\n"],["create_port","Ropenstack::Quantum","Ropenstack/Quantum.html#method-i-create_port","(network, device, subnet = nil)","<p>Create a new port given network and device ids, optional  parameter subnet\nid allows for scoping the …\n"],["create_router","Ropenstack::Quantum","Ropenstack/Quantum.html#method-i-create_router","(name, admin_state_up = true)","<p>Create a new router with a given name.\n"],["create_server","Ropenstack::Nova","Ropenstack/Nova.html#method-i-create_server","(name, image, flavor, network = nil, metadata = nil)","<p>Creates a server on OpenStack.\n"],["create_subnet","Ropenstack::Quantum","Ropenstack/Quantum.html#method-i-create_subnet","(network, cidr)","<p>Create a new ipv4 subnet in a network, given a network id, and a IP range\nin CIDR format.\n"],["delete_image","Ropenstack::Nova","Ropenstack/Nova.html#method-i-delete_image","(id)","<p>Delete an image stored on Openstack through the nova endpoint\n"],["delete_network","Ropenstack::Quantum","Ropenstack/Quantum.html#method-i-delete_network","(network)","<p>Delete a network given a network id.\n"],["delete_port","Ropenstack::Quantum","Ropenstack/Quantum.html#method-i-delete_port","(port)","<p>Delete a port given a port id.\n"],["delete_request","Ropenstack::Rest","Ropenstack/Rest.html#method-i-delete_request","(uri, token = nil, manage_errors = true)","<p>Wrapper function for delete requests, just provide a uri and it will return\nyou a hash with the result …\n"],["delete_router","Ropenstack::Quantum","Ropenstack/Quantum.html#method-i-delete_router","(router)","<p>Delete a router given a routers id.\n"],["delete_router_gateway","Ropenstack::Quantum","Ropenstack/Quantum.html#method-i-delete_router_gateway","(router)","<p>Clear a routers external gateway information given a router id.\n"],["delete_router_interface","Ropenstack::Quantum","Ropenstack/Quantum.html#method-i-delete_router_interface","(router, id, type)","<p>Delete a connection between a subnet and router given either port or subnet\nids.\n"],["delete_server","Ropenstack::Nova","Ropenstack/Nova.html#method-i-delete_server","(id)","<p>Deletes a server from Openstack based on an id\n"],["delete_subnet","Ropenstack::Quantum","Ropenstack/Quantum.html#method-i-delete_subnet","(subnet)","<p>Delete a subnet given a subnet id\n"],["detach_volume","Ropenstack::Nova","Ropenstack/Nova.html#method-i-detach_volume","(id, attachment)","<p>Remove a cinder volume from a server, by passing the server id and the\nattachment id.\n"],["device_ports","Ropenstack::Quantum","Ropenstack/Quantum.html#method-i-device_ports","(device_id)","<p>Get a list of ports specific to a device_id\n"],["do_request","Ropenstack::Rest","Ropenstack/Rest.html#method-i-do_request","(uri, request, manage_errors = true, timeout = 10)","<p>The function which you call to perform a http request  using the request\nobject given in the parameters. …\n"],["error_manager","Ropenstack::Rest","Ropenstack/Rest.html#method-i-error_manager","(uri, response)","<p>All responses from openstack where any errors need to be caught are passed\nthrough this function. Unless …\n"],["flavors","Ropenstack::Nova","Ropenstack/Nova.html#method-i-flavors","()","<p>Get a list of flavors that Servers can be\n"],["getEndpoints","Ropenstack::Keystone","Ropenstack/Keystone.html#method-i-getEndpoints","()","<p>Get the endpoint list\n"],["getServices","Ropenstack::Keystone","Ropenstack/Keystone.html#method-i-getServices","()","<p>Get list of services\n"],["get_request","Ropenstack::Rest","Ropenstack/Rest.html#method-i-get_request","(uri, token = nil, manage_errors = true)","<p>Wrapper function for a get request, just provide a uri and it will return\nyou a hash with the result …\n"],["images","Ropenstack::Glance","Ropenstack/Glance.html#method-i-images","()","<p>Returns a list of images with all associated meta-data in  hash format.\n"],["images","Ropenstack::Nova","Ropenstack/Nova.html#method-i-images","()","<p>Retrieve a list of images from Openstack through the nova endpoint\n"],["move_port_to_subnets","Ropenstack::Quantum","Ropenstack/Quantum.html#method-i-move_port_to_subnets","(port_id, subnet_ids)","<p>Weird function for adding a port to multiple subnets if nessessary.\n"],["networks","Ropenstack::Quantum","Ropenstack/Quantum.html#method-i-networks","()","<p>Get a list of a tenants networks\n"],["new","Ropenstack::Keystone","Ropenstack/Keystone.html#method-c-new","(address, port, token = nil)","<p>Overide of the initialize function to allow users to provide keystone\naddress and port outside of a  …\n"],["new","Ropenstack::OpenstackService","Ropenstack/OpenstackService.html#method-c-new","(location, token)",""],["ports","Ropenstack::Quantum","Ropenstack/Quantum.html#method-i-ports","()","<p>Get a list of ports\n"],["post_request","Ropenstack::Rest","Ropenstack/Rest.html#method-i-post_request","(uri, body, token = nil, manage_errors = true)","<p>Wrapper function for a put request, just provide a uri and a hash of the\ndata to send, then it will return …\n"],["put_octect","Ropenstack::Glance","Ropenstack/Glance.html#method-i-put_octect","(uri, data, manage_errors)","<p>Special rest call for sending a file stream using an octet-stream main\nchange is just custom headers. …\n"],["put_request","Ropenstack::Rest","Ropenstack/Rest.html#method-i-put_request","(uri, body, token = nil, manage_errors = true)","<p>Wrapper function for a put request, just provide a uri and a hash of the\ndata to send, then it will return …\n"],["quotas","Ropenstack::Nova","Ropenstack/Nova.html#method-i-quotas","()","<p>Get a tenants compute quotas\n"],["raw","Ropenstack::Keystone","Ropenstack/Keystone.html#method-i-raw","()","<p>Return the raw @data hash with all the data from authentication.\n"],["routers","Ropenstack::Quantum","Ropenstack/Quantum.html#method-i-routers","()","<p>Retrieve routers owned by the tenant making the request\n"],["scope_token","Ropenstack::Keystone","Ropenstack/Keystone.html#method-i-scope_token","(para1, para2 = nil, para3 = nil)","<p>Scope token provides two ways to call it:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">scope_token</span>(<span class=\"ruby-identifier\">tenantName</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">Just</span> <span class=\"ruby-identifier\">using</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">current</span> <span class=\"ruby-identifier\">token</span> <span class=\"ruby-keyword\">and</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["servers","Ropenstack::Nova","Ropenstack/Nova.html#method-i-servers","(id)","<p>Gets a list of servers from OpenStack\n"],["servers_detailed","Ropenstack::Nova","Ropenstack/Nova.html#method-i-servers_detailed","()","<p>Gets a more detailed list of servers from openstack.\n"],["services","Ropenstack::Keystone","Ropenstack/Keystone.html#method-i-services","()","<p>Get the service catalog returned by Keystone on authentication.\n"],["subnets","Ropenstack::Quantum","Ropenstack/Quantum.html#method-i-subnets","()","<p>Get a list of subnets\n"],["tenant_id","Ropenstack::Keystone","Ropenstack/Keystone.html#method-i-tenant_id","()","<p>Get the tenant id from the @data\n"],["tenant_list","Ropenstack::Keystone","Ropenstack/Keystone.html#method-i-tenant_list","()","<p>Separate Keystone Calls\n"],["tenant_name","Ropenstack::Keystone","Ropenstack/Keystone.html#method-i-tenant_name","()",""],["token","Ropenstack::Keystone","Ropenstack/Keystone.html#method-i-token","()","<p>Gets the authentication token from the hash and returns it as a string.\n"],["token_metadata","Ropenstack::Keystone","Ropenstack/Keystone.html#method-i-token_metadata","()","<p>This returns the token and all metadata associated with the token, \nincluding the tenant information. …\n"],["update_port","Ropenstack::Quantum","Ropenstack/Quantum.html#method-i-update_port","(port, fixed_ips)","<p>Update a specific ports fixed_ips, including subnet and ip data.\n"],["upload_image_from_file","Ropenstack::Glance","Ropenstack/Glance.html#method-i-upload_image_from_file","(name, disk_format, container_format, minDisk, minRam, is_public, file)","<p>Upload an image to glance from a file, takes in a ruby file object.  More\nconvoluted than it should be …\n"],["user","Ropenstack::Keystone","Ropenstack/Keystone.html#method-i-user","()","<p>Return the user hash from the authentication data\n"],["volumes","Ropenstack::Cinder","Ropenstack/Cinder.html#method-i-volumes","()","<p>Gets the volumes from cinder, and provides them in a ruby hash  with all\ninformation about them.\n"]]}}